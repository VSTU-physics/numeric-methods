---
layout: post
title:  "Численное интегрирование: формулы Гаусса"
date:   2014-09-23 21:12:19
categories: интегрирование
---

## Общие соображения

При использовании многочлена Лагранжа получается квадратурная формула вида

$$
    \int\limits_a^b f(x)\,dx = \sum_{i=0}^{n} c_i f(x_i),
$$

которая точна для многочленов степени $$ n $$. Но может быть, можно подобрать
такие узлы и веса, при которых формула будет точно для многочленов более высоких
степеней?

Без уменьшения общности можно рассматривать только интегралы на $$ [-1, 1] $$.
Для начала попробуем "сделать" формулу точной для всех многочленов степени
$$ n + 1 $$. Очевидно, что если формула точна хотя бы для одного такого
многочлена, то она точна и для всех остальных. Поэтому рассмотрим многочлен

$$
    w_{n + 1}(x) = (x - x_0)\cdot(x - x_1)\cdot\cdots\cdot(x - x_n),
$$

для которого, согласно квадратурной формуле, получаем

$$
    \int\limits_{-1}^1 w_{n+1}(x) dx = \sum_{i=0}^{n} c_i w_{n+1}(x_i) = 0.
$$

Отсюда получается, что для точности формулы для многочленов порядка $$ n + 1 $$
на узлы нужно наложить условие:

$$
    \int\limits_{-1}^1 w_{n+1}(x) dx = 0.
$$

Теперь попробуем ещё улучшить формулу и сделать её точной для многочленов
степени $$ n + 2 $$. В качестве испытуемого многочлена выберем такой, у которого
правая часть формулы наверняка будет нулевой. Например, можно использовать
$$ Q_{n+2}(x) = x \cdot w_{n+1}(x) $$:

$$
    \int\limits_{-1}^1 x \cdot w_{n+1}(x) dx = 0.
$$

Продолжая подбирать многочлены $$ Q_{n+m}(x) = x^{m-1} \cdot w_{n+1}(x) $$
и выписывать нулевые интегралы, мы можем существенно конкретизировать узлы и
увеличить точность интегрирования.

Однако, для многочлена $$ Q_{2n+2}(x) $$ точность формулы уже гарантировать
нельзя. Нетрудно построить многочлен степени $$ 2n + 2 $$, для которого формула
будет неточна при любом выборе узлов:

$$
    \int\limits_{-1}^1 w_{n+1}^2(x) dx \ne 0.
$$

Поэтому максимальная степень многочлена, для которой формула может быть верна
равна $$ 2n + 1 $$. Причём, для того, чтобы она была верна, должны выполняться
следующие условия:

$$
    \int\limits_{-1}^1 x^m \cdot w_{n+1}(x) dx = 0,\quad
    \forall m \in \{0, 1, \ldots, n\}
$$

Это равенство означает, что многочлен $$ w_{n+1}(x) $$ _ортогонален_ всем
многочленам меньших степеней _с весом 1 на отрезке $$ [-1, 1] $$_. Семейство
таких многочленов называется _ортогональными многочленами Лежандра $$ P_n $$_.

Это означает, что

$$
    w_{n+1}(x) = \prod_{i=0}^n (x - x_i) = P_{n+1}(x),
$$

откуда следует, что _узлами разбиения являются корни многочлена Лежандра
$$ P_{n+1} $$_.

## Определение узлов разбиения

Для определения корней можно воспользоваться следующим алгоритмом:

{% highlight python %}
def lejendre_roots(n):
    p = lejendre(n)
    f = to_func(p)
    d = to_func(derivative(p))
    xs = []
    for i in range(n):
        x = cos(pi * (4 * i + 3) / (4 * n + 2)) # начальное значение
        delta = 1 # произвольное значение, чтобы зайти в цикл
        while abs(delta) > 1e-8:
            delta = f(x) / d(x)
            x -= delta
        xs.append(x) # добавляем корень к ответу и ищем следующий
    return xs
{% endhighlight %}

где `legendre(n)` возвращает массив коэффициентов полинома Лежандра,
`derivative(p)` -- массив коэффициентов производной многочлена, а
`to_func(p)` превращает массив коэффициентов многочлена в функцию:

{% highlight python %}
def lejendre(n):
    if n == 0:
        return [1]      # P₀(x) = 1
    elif n == 1:
        return [0, 1]   # P₁(x) = x

    # далее обрабатываем остальные случаи с помощью рекуррентной формулы
    a, b = [1], [0, 1]

    for i in range(1, n):
        a, b = b, a
        b = b + [0.0, 0.0]

        b[0] *= -i / (i + 1.0)
        for j in range(1, i + 2):
            b[j] = (2 * i + 1.0) / (i + 1.0) * a[j - 1] - i / (i + 1.0) * b[j]
    return b


def derivative(p):
    return [a * (i + 1) for i, a in enumerate(p[1:])]


def to_func(p):
    return lambda x: sum(a * x ** i for i, a in enumerate(p))
{% endhighlight %}

## Определение весов

Теперь нужно определить веса. Это достаточно просто сделать, если учесть, что
формула точна и для многочленов степеней $$ 0, \ldots, n $$:

$$
    \forall j \in \{0, \dots, n\}:
    \sum_{i=0}^{n} c_i x_i^j = \frac{1 - (-1)^{j + 1}}{j + 1}.
$$

Решая эту систему относительно $$ \{c_0, \ldots, c_n\} $$, полностью
доопределяем квадратурную формулу.
